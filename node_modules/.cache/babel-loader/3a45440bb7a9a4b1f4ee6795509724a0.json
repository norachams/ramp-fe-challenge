{"ast":null,"code":"var _jsxFileName = \"/Users/norach/Desktop/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    loading: employeesLoading,\n    fetchAll: fetchAllEmployees\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchAllPaginatedTransactions,\n    invalidateData: invalidatePaginatedTransactions\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData: invalidateTransactionsByEmployee\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(EMPTY_EMPLOYEE);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    invalidateTransactionsByEmployee();\n    await fetchAllEmployees();\n    await fetchAllPaginatedTransactions();\n    setIsLoading(false);\n  }, [fetchAllEmployees, fetchAllPaginatedTransactions, invalidateTransactionsByEmployee]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    invalidatePaginatedTransactions();\n    await fetchTransactionsByEmployee(employeeId);\n  }, [invalidatePaginatedTransactions, fetchTransactionsByEmployee]);\n  useEffect(() => {\n    if (employees === null && !employeesLoading) {\n      loadAllTransactions();\n    }\n  }, [employeesLoading, employees, loadAllTransactions]);\n\n  const handleEmployeeChange = async newValue => {\n    if (newValue == null) {\n      return;\n    }\n\n    setSelectedEmployee(newValue);\n\n    if (newValue.id === EMPTY_EMPLOYEE.id) {\n      await loadAllTransactions();\n    } else {\n      await loadTransactionsByEmployee(newValue.id);\n    }\n  };\n\n  const hasMoreTransactions = useMemo(() => {\n    return (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null;\n  }, [paginatedTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: employeesLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: handleEmployeeChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), transactions !== null && (selectedEmployee === null || selectedEmployee === void 0 ? void 0 : selectedEmployee.id) === EMPTY_EMPLOYEE.id && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\" //disabled={paginatedTransactionsUtils.loading || !hasMoreTransactions}\n          ,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"d504uJkmSK1GYW8RphFyd1Ydqrs=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","React","App","data","employees","loading","employeesLoading","fetchAll","fetchAllEmployees","paginatedTransactions","fetchAllPaginatedTransactions","invalidateData","invalidatePaginatedTransactions","transactionsByEmployee","fetchById","fetchTransactionsByEmployee","invalidateTransactionsByEmployee","isLoading","setIsLoading","selectedEmployee","setSelectedEmployee","transactions","loadAllTransactions","loadTransactionsByEmployee","employeeId","handleEmployeeChange","newValue","id","hasMoreTransactions","nextPage","item","value","label","firstName","lastName"],"sources":["/Users/norach/Desktop/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\nimport React from \"react\"\n\nexport function App() {\n  const { data: employees, loading: employeesLoading, fetchAll: fetchAllEmployees } = useEmployees()\n  const { data: paginatedTransactions, fetchAll: fetchAllPaginatedTransactions, invalidateData: invalidatePaginatedTransactions } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, fetchById: fetchTransactionsByEmployee, invalidateData: invalidateTransactionsByEmployee } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee>(EMPTY_EMPLOYEE)\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    invalidateTransactionsByEmployee()\n\n    await fetchAllEmployees()\n    await fetchAllPaginatedTransactions()\n\n    setIsLoading(false)\n  }, [fetchAllEmployees, fetchAllPaginatedTransactions, invalidateTransactionsByEmployee])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      invalidatePaginatedTransactions()\n      await fetchTransactionsByEmployee(employeeId)\n    },\n    [invalidatePaginatedTransactions, fetchTransactionsByEmployee]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeesLoading) {\n      loadAllTransactions()\n    }\n  }, [employeesLoading, employees, loadAllTransactions])\n\n  const handleEmployeeChange = async (newValue: Employee | null) => {\n    if (newValue == null) {\n      return\n    }\n    setSelectedEmployee(newValue)\n    if (newValue.id === EMPTY_EMPLOYEE.id) {\n      await loadAllTransactions()\n    } else {\n      await loadTransactionsByEmployee(newValue.id)\n    }\n  }\n\n  const hasMoreTransactions = useMemo(() => {\n    return paginatedTransactions?.nextPage !== null\n  }, [paginatedTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={employeesLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={handleEmployeeChange}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n          \n          {transactions !== null && selectedEmployee?.id === EMPTY_EMPLOYEE.id && (\n            <button\n              className=\"RampButton\"\n              //disabled={paginatedTransactionsUtils.loading || !hasMoreTransactions}\n              onClick={async () => {\n                await loadAllTransactions()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}