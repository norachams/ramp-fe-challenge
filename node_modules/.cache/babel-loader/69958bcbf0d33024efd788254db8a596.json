{"ast":null,"code":"var _jsxFileName = \"/Users/norach/Desktop/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    fetchAll: fetchAllEmployees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchAllPaginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData: invalidateTransactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee(); //const { data: employees, ...employeeUtils } = useEmployees()\n  //const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  //const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  //const [isLoading, setIsLoading] = useState(false)\n\n  const [isLoadingEmployees, setIsLoadingEmployees] = useState(false);\n  const [isLoadingTransactions, setIsLoadingTransactions] = useState(false); // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  const [selectedEmployee, setSelectedEmployee] = useState(EMPTY_EMPLOYEE); // CHANGED: Initialize with EMPTY_EMPLOYEE\n  //added selectedEmployee state to track the currently selected employee\n\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoadingTransactions(true);\n    invalidateTransactionsByEmployee();\n    await fetchAllPaginatedTransactions();\n    setIsLoadingTransactions(false);\n  }, [fetchAllPaginatedTransactions, invalidateTransactionsByEmployee]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    invalidateTransactionsByEmployee();\n    await fetchTransactionsByEmployee(employeeId);\n  }, [fetchTransactionsByEmployee, invalidateTransactionsByEmployee]);\n  useEffect(() => {\n    const loadEmployees = async () => {\n      setIsLoadingEmployees(true);\n      await fetchAllEmployees();\n      setIsLoadingEmployees(false);\n    };\n\n    if (employees === null && !isLoadingEmployees) {\n      loadEmployees();\n    }\n  }, [employees, fetchAllEmployees, isLoadingEmployees]);\n\n  const handleEmployeeChange = async newValue => {\n    if (newValue == null) {\n      return;\n    }\n\n    setSelectedEmployee(newValue);\n\n    if (newValue.id === EMPTY_EMPLOYEE.id) {\n      await loadAllTransactions();\n    } else {\n      await loadTransactionsByEmployee(newValue.id);\n    }\n  }; // BUG 6: Function to check if there are more transactions to load\n\n\n  const hasMoreTransactions = useMemo(() => {\n    return (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null;\n  }, [paginatedTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoadingEmployees //addd employee state here\n        ,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: handleEmployeeChange // Bug 3: Added a new function to handle employee change and fix the error when selecting all employees \n\n        /*\n        onChange={async (newValue) => {\n          if (newValue === null) {\n            return\n          }\n           await loadTransactionsByEmployee(newValue.id)\n          \n        }}*/\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), transactions !== null && (selectedEmployee === null || selectedEmployee === void 0 ? void 0 : selectedEmployee.id) === EMPTY_EMPLOYEE.id && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading || !hasMoreTransactions,\n          onClick: async () => {\n            await fetchAllPaginatedTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"CQRJNl3+kOKl3bF/un9Xm0jr5Xo=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","React","App","data","employees","fetchAll","fetchAllEmployees","employeeUtils","paginatedTransactions","fetchAllPaginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","fetchById","fetchTransactionsByEmployee","invalidateData","invalidateTransactionsByEmployee","transactionsByEmployeeUtils","isLoadingEmployees","setIsLoadingEmployees","isLoadingTransactions","setIsLoadingTransactions","selectedEmployee","setSelectedEmployee","transactions","loadAllTransactions","loadTransactionsByEmployee","employeeId","loadEmployees","handleEmployeeChange","newValue","id","hasMoreTransactions","nextPage","item","value","label","firstName","lastName","loading"],"sources":["/Users/norach/Desktop/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\nimport React from \"react\"\n\nexport function App() {\n  const { data: employees, fetchAll: fetchAllEmployees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, fetchAll: fetchAllPaginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, fetchById: fetchTransactionsByEmployee, invalidateData: invalidateTransactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  //const { data: employees, ...employeeUtils } = useEmployees()\n  //const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  //const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  //const [isLoading, setIsLoading] = useState(false)\n\n  const [isLoadingEmployees, setIsLoadingEmployees] = useState(false)\n  const [isLoadingTransactions, setIsLoadingTransactions] = useState(false)\n \n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee>(EMPTY_EMPLOYEE); // CHANGED: Initialize with EMPTY_EMPLOYEE\n  //added selectedEmployee state to track the currently selected employee\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoadingTransactions(true)\n    invalidateTransactionsByEmployee()\n    await fetchAllPaginatedTransactions()\n    setIsLoadingTransactions(false)\n  }, [fetchAllPaginatedTransactions, invalidateTransactionsByEmployee])\n\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      invalidateTransactionsByEmployee()\n      await fetchTransactionsByEmployee(employeeId)\n    },\n    [fetchTransactionsByEmployee, invalidateTransactionsByEmployee]\n  )\n  useEffect(() => {\n    const loadEmployees = async () => {\n      setIsLoadingEmployees(true)\n      await fetchAllEmployees()\n      setIsLoadingEmployees(false)\n    }\n    if (employees === null && !isLoadingEmployees) {\n      loadEmployees()\n    }\n  }, [employees, fetchAllEmployees, isLoadingEmployees])\n\n  const handleEmployeeChange = async (newValue: Employee | null) => {\n    if (newValue == null) {\n      return;\n    }\n    setSelectedEmployee(newValue);\n    if (newValue.id === EMPTY_EMPLOYEE.id){\n      await loadAllTransactions();\n    }else{\n      await loadTransactionsByEmployee(newValue.id)\n    }\n  }\n\n  // BUG 6: Function to check if there are more transactions to load\n  const hasMoreTransactions = useMemo(() => {\n    return paginatedTransactions?.nextPage !== null;\n  }, [paginatedTransactions]);\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoadingEmployees} //addd employee state here\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={handleEmployeeChange}\n          // Bug 3: Added a new function to handle employee change and fix the error when selecting all employees \n          /*\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return\n            }\n\n            await loadTransactionsByEmployee(newValue.id)\n            \n          }}*/\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n          \n          {transactions !== null && selectedEmployee?.id === EMPTY_EMPLOYEE.id && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading || !hasMoreTransactions}\n              onClick={async () => {\n                await fetchAllPaginatedTransactions()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}