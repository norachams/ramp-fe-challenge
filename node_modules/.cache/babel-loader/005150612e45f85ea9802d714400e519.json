{"ast":null,"code":"var _jsxFileName = \"/Users/norach/Desktop/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(EMPTY_EMPLOYEE); // Initialize with EMPTY_EMPLOYEE\n\n  const [transactionApprovalStates, setTransactionApprovalStates] = useState({});\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    setIsLoading(false); //BUG 5: changed loading location to after employees instead of after paginatedTransacations\n\n    await paginatedTransactionsUtils.fetchAll();\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  useEffect(() => {\n    if (transactions) {\n      const initialStates = transactions.reduce((acc, transaction) => {\n        acc[transaction.id] = transaction.approved;\n        return acc;\n      }, {});\n      setTransactionApprovalStates(initialStates);\n    }\n  }, [transactions]);\n\n  const handleEmployeeChange = async newValue => {\n    if (newValue == null) {\n      return;\n    }\n\n    setSelectedEmployee(newValue);\n\n    if (newValue.id === EMPTY_EMPLOYEE.id) {\n      await loadAllTransactions();\n    } else {\n      await loadTransactionsByEmployee(newValue.id);\n    }\n  };\n\n  const setTransactionApproval = useCallback(async _ref2 => {\n    let {\n      transactionId,\n      newValue\n    } = _ref2;\n    await fetchWithoutCache(\"setTransactionApproval\", {\n      transactionId,\n      value: newValue\n    });\n    setTransactionApprovalStates(prev => ({ ...prev,\n      [transactionId]: newValue\n    }));\n  }, [fetchWithoutCache]); // BUG 6: Function to check if there are more transactions to load\n\n  const hasMoreTransactions = useMemo(() => {\n    return (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null;\n  }, [paginatedTransactions]); //const shouldShowLoadMoreButton = transactions !== null && selectedEmployee?.id === EMPTY_EMPLOYEE.id && hasMoreTransactions;\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: handleEmployeeChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), transactions !== null && (selectedEmployee === null || selectedEmployee === void 0 ? void 0 : selectedEmployee.id) === EMPTY_EMPLOYEE.id && hasMoreTransactions &&\n        /*#__PURE__*/\n        //bug 6: remove view more button ones all transactiosn are loaded\n        _jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await paginatedTransactionsUtils.fetchAll();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"TqTwNNOcX+PYhDjV6tSgN2WmlPI=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nfunction fetchWithoutCache(arg0, arg1) {\n  throw new Error(\"Function not implemented.\");\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","React","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","selectedEmployee","setSelectedEmployee","transactionApprovalStates","setTransactionApprovalStates","transactions","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","loading","initialStates","reduce","acc","transaction","id","approved","handleEmployeeChange","newValue","setTransactionApproval","transactionId","fetchWithoutCache","value","prev","hasMoreTransactions","nextPage","item","label","firstName","lastName","arg0","arg1","Error"],"sources":["/Users/norach/Desktop/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee, SetTransactionApprovalParams } from \"./utils/types\"\nimport React from \"react\"\nimport { SetTransactionApprovalFunction } from \"./components/Transactions/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee>(EMPTY_EMPLOYEE); // Initialize with EMPTY_EMPLOYEE\n  const [transactionApprovalStates, setTransactionApprovalStates] = useState<Record<string, boolean>>({});\n\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData()\n\n    await employeeUtils.fetchAll()\n    setIsLoading(false) //BUG 5: changed loading location to after employees instead of after paginatedTransacations\n\n    await paginatedTransactionsUtils.fetchAll()\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  useEffect(() => {\n    if (transactions) {\n      const initialStates = transactions.reduce((acc, transaction) => {\n        acc[transaction.id] = transaction.approved;\n        return acc;\n      }, {} as Record<string, boolean>);\n      setTransactionApprovalStates(initialStates);\n    }\n  }, [transactions]);\n\n\n  const handleEmployeeChange = async (newValue: Employee | null) => {\n    if (newValue == null) {\n      return;\n    }\n    setSelectedEmployee(newValue);\n    if (newValue.id === EMPTY_EMPLOYEE.id) {\n      await loadAllTransactions();\n    } else {\n      await loadTransactionsByEmployee(newValue.id);\n    }\n  };\n\n  const setTransactionApproval = useCallback<SetTransactionApprovalFunction>(\n    async ({ transactionId, newValue }) => {\n      await fetchWithoutCache<void, SetTransactionApprovalParams>(\"setTransactionApproval\", {\n        transactionId,\n        value: newValue,\n      });\n      setTransactionApprovalStates((prev) => ({\n        ...prev,\n        [transactionId]: newValue,\n      }));\n    },\n    [fetchWithoutCache]\n  );\n\n  // BUG 6: Function to check if there are more transactions to load\n  const hasMoreTransactions = useMemo(() => {\n    return paginatedTransactions?.nextPage !== null;\n  }, [paginatedTransactions]);\n\n  //const shouldShowLoadMoreButton = transactions !== null && selectedEmployee?.id === EMPTY_EMPLOYEE.id && hasMoreTransactions;\n\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={handleEmployeeChange} \n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions}\n          \n          \n          />\n\n\n          {transactions !== null && selectedEmployee?.id === EMPTY_EMPLOYEE.id && hasMoreTransactions && ( //bug 6: remove view more button ones all transactiosn are loaded\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading} \n              onClick={async () => {\n                await paginatedTransactionsUtils.fetchAll(); \n   }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\nfunction fetchWithoutCache<T, U>(arg0: string, arg1: { transactionId: any; value: any }) {\n  throw new Error(\"Function not implemented.\")\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}